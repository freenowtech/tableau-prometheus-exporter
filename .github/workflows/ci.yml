name: tests

on:
  push:
    # Avoid using all the resources/limits available by checking only
    # relevant branches and tags. Other branches can be checked via PRs.
    branches: [main]
    tags: ['v[0-9]*', '[0-9]+.[0-9]+*']  # Match tags that resemble a version
  pull_request:  # Run in every PR
  workflow_dispatch:  # Allow manually triggering the workflow
  schedule:
    # Run roughly every 15 days at 00:00 UTC
    # (useful to check if updates on dependencies break the package)
    - cron: '0 0 1,16 * *'

permissions:
  contents: write
  pull-requests: write
  packages: write

concurrency:
  group: >-
    ${{ github.workflow }}-${{ github.ref_type }}-
    ${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
#  prepare:
#    runs-on: ubuntu-latest
#    outputs:
#      wheel-distribution: ${{ steps.wheel-distribution.outputs.path }}
#    steps:
#      - uses: actions/checkout@v3
#        with: {fetch-depth: 0}  # deep clone for setuptools-scm
#      - uses: actions/setup-python@v4
#        id: setup-python
#        with: {python-version: "3.11"}
#      - name: Run static analysis and format checkers
#        run: pipx run pre-commit run --all-files --show-diff-on-failure
#      - name: Build package distribution files
#        run: >-
#          pipx run --python '${{ steps.setup-python.outputs.python-path }}'
#          tox -e clean,build
#      - name: Record the path of wheel distribution
#        id: wheel-distribution
#        run: echo "path=$(ls dist/*.whl)" >> $GITHUB_OUTPUT
#      - name: Store the distribution files for use in other stages
#        # `tests` and `publish` will use the same pre-built distributions,
#        # so we make sure to release the exact same package that was tested
#        uses: actions/upload-artifact@v3
#        with:
#          name: python-distribution-files
#          path: dist/
#          retention-days: 1
#
#  test:
#    needs: prepare
#    strategy:
#      matrix:
#        python:
#        - "3.7"  # oldest Python supported by PSF
#        - "3.11"  # newest Python that is stable
#        platform:
#        - ubuntu-latest
#        - macos-latest
#        - windows-latest
#    runs-on: ${{ matrix.platform }}
#    steps:
#      - uses: actions/checkout@v3
#      - uses: actions/setup-python@v4
#        id: setup-python
#        with:
#          python-version: ${{ matrix.python }}
#      - name: Retrieve pre-built distribution files
#        uses: actions/download-artifact@v3
#        with: {name: python-distribution-files, path: dist/}
#      - name: Run tests
#        run: >-
#          pipx run --python '${{ steps.setup-python.outputs.python-path }}'
#          tox --installpkg '${{ needs.prepare.outputs.wheel-distribution }}'
#          -- -rFEx --durations 10 --color yes  # pytest args
#      - name: Generate coverage report
#        run: pipx run coverage lcov -o coverage.lcov
#      - name: Upload partial coverage report
#        uses: coverallsapp/github-action@master
#        with:
#          path-to-lcov: coverage.lcov
#          github-token: ${{ secrets.GITHUB_TOKEN }}
#          flag-name: ${{ matrix.platform }} - py${{ matrix.python }}
#          parallel: true
#
#  finalize:
#    needs: test
#    runs-on: ubuntu-latest
#    steps:
#      - name: Finalize coverage report
#        uses: coverallsapp/github-action@master
#        with:
#          github-token: ${{ secrets.GITHUB_TOKEN }}
#          parallel-finished: true
#
  changelog:
#    needs: finalize
#    if: ${{ github.event_name == 'push' && contains(github.ref, 'refs/tags/') }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: 'main'
          fetch-depth: 0
      - name: Generate Changelog
        uses: sergioasantiago/generate-changelog-action@main
        id: changelog
        with:
#          next_tag: 0.2.1
          output_file: CHANGELOG.rst
          write_file: true
          config_path: ${{ github.workspace }}/.chglog
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          commit-message: "Update CHANGELOG.rst"
          branch: chore/update-changelog
          delete-branch: true
          title: "Update CHANGELOG"

  publish-pypi:
    needs: changelog
    if: ${{ github.event_name == 'push' && contains(github.ref, 'refs/tags/') }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with: {python-version: "3.11"}
      - name: Retrieve pre-built distribution files
        uses: actions/download-artifact@v3
        with: {name: python-distribution-files, path: dist/}
      - name: Publish Package
        env:
          TWINE_REPOSITORY: pypi
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: pipx run tox -e publish

  publish-docker:
    needs: publish-pypi
    if: ${{ github.event_name == 'push' && contains(github.ref, 'refs/tags/') }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.FREE_NOW_GITHUB_USER }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: "VERSION===${{ github.ref_name }}"
          platforms: linux/amd64,linux/arm64
